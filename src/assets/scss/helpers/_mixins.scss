//
// Mixins
// --------------------------------------------------

@mixin breakpoint($points) {
  @each $point in $points {
    @if $point == large {
      @media (min-width: $screen-lg-min) { @content; }
    }
    @else if $point == desktop {
      @media (min-width: $screen-md-min) and (max-width: $screen-lg-min) { @content; }
    }
    @else if $point == desktop-down {
      @media (max-width: $screen-md-max) { @content; }
    }
    @else if $point == tablet-up {
      @media (min-width: $screen-md-min) { @content; }
    }
    @else if $point == tablet {
      @media (min-width: $screen-sm-min) and (max-width: $screen-sm-max) { @content; }
    }
    @else if $point == tablet-down {
      @media (max-width: $screen-sm-max) { @content; }
    }
    @else if $point == tablet-portrait-down {
      @media (max-width: $screen-xs-max)  { @content; }
      @media (min-width: $screen-sm-min) and (max-width: $screen-sm-max) and (orientation: portrait) { @content; }
    }
    @else if $point == tablet-landscape-up {
      @media (min-width: $screen-md-min) { @content; }
      @media (min-width: $screen-sm-min) and (max-width: $screen-sm-max) and (orientation: landscape) { @content; }
    }
    @else if $point == tablet-portrait {
      @media (min-width: $screen-sm-min) and (max-width: $screen-sm-max) and (orientation: portrait) { @content; }
    }
    @else if $point == tablet-landscape {
      @media (min-width: $screen-sm-min) and (max-width: $screen-sm-max) and (orientation: landscape) { @content; }
    }
    @else if $point == phone-up {
      @media (min-width: $screen-sm-min) { @content; }
    }
    @else if $point == phone {
      @media (max-width: $screen-xs-max)  { @content; }
    }
    @else if $point == phone-portrait {
      @media (max-width: $screen-xs-max) and (orientation: portrait)  { @content; }
    }
    @else if $point == phone-landscape {
      @media (max-width: $screen-xs-max) and (orientation: landscape)  { @content; }
    }
  }
}

// Background Color, Border Color, Color, Hover Background Color, Hover Border Color, Hover Color, Pressed Background Color, Pressed Border Color, Pressed Color
@mixin cdt-btn($bkg-col, $brd-col, $col, $hov-bkg-col, $hov-brd-col, $hov-col, $press-bkg-col, $press-brd-col, $press-col) {
  background-color: $bkg-col;
  border-color: $brd-col;
  color: $col;
  &:focus {
    background-color: $bkg-col;
    border-color: $brd-col;
    color: $col;
  }
  &:hover,
  &:active {
    background-color: $hov-bkg-col;
    border-color: $hov-brd-col;
    color: $hov-col;
  }
  &:focus:active {
    background-color: $press-bkg-col;
    border-color: $press-brd-col;
    color: $press-col;
    outline: 0;
    box-shadow: none;
  }
}

// Background Color, Border Color, Color
@mixin cdt-btn-special($bkg-col, $col:$color-white) {
  background-color: $bkg-col;
  border-color: $bkg-col;
  color: $col;
  &:focus {
    background-color: $bkg-col;
    border-color: $bkg-col;
    color: $col;
  }
  &:hover,
  &:active {
    background-color: darken($bkg-col, 7%);
    border-color: darken($bkg-col, 7%);
    color: $col;
  }
  &:focus:active {
    background-color: darken($bkg-col, 7%);
    border-color: darken($bkg-col, 7%);
    color: $col;
    outline: 0;
    box-shadow: none;
  }
}

@mixin vertical-align($position: absolute) {
  position: $position;
  top: 50%;
  -ms-transform: translateY(-50%);
  -moz-transform: translateY(-50%);
  -o-transform: translateY(-50%);
  transform: translateY(-50%);
  -webkit-transform: translateY(-50%);
}

@mixin transition($args...) {
  -moz-transition: $args;
  -webkit-transition: $args;
  -o-transition: $args;
  -ms-transition: $args;
  transition: $args;
}

@mixin displayFlex() {
  display:         flex;
  display:  -webkit-box;
  display:  -ms-flexbox;
  display: -webkit-flex;
}
